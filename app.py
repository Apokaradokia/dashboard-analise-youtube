#============================================================
# PROJETO DE AN√ÅLISE DE DADOS E DASHBOARD - TRAINEE SCITEC JR
# ALUNO: Leandro Pereira da Silva Filho
# Arquivo: app.py (Dashboard Interativo) - Vers√£o com ML implementado
#============================================================

# Importa√ß√£o das Bibliotecas 
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import kagglehub
import zipfile
import os
import numpy as np 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

@st.cache_data
def carregar_e_preparar_dados():
    # Baixa e retorna o caminho da pasta do dataset
    path = kagglehub.dataset_download("cyberevil545/youtube-videos-data-for-ml-and-trend-analysis")
    
    # Monta o caminho completo do CSV (ajuste o nome exato se for diferente)
    csv_path = os.path.join(path, "youtube_data.csv")
    df = pd.read_csv(csv_path)

    # Tratamento das colunas
    df.dropna(subset=['views', 'likes', 'category'], inplace=True)
    # Convers√£o em tipo n√∫merico para realizar os c√°lculos
    df['views'] = pd.to_numeric(df["views"],errors='coerce')
    df['likes'] = pd.to_numeric(df["likes"], errors= 'coerce')
    df.dropna(subset=['views', 'likes'], inplace= True)
    return df

# Execu√ß√£o do carregamento 
try:
    df = carregar_e_preparar_dados()
except Exception as e:
    st.error("Erro ao carregar os dados. Verifique sua chave API do Kaggle e a conex√£o.")
    st.exception(e) # Mostra o erro detalhado
    st.stop()

# Constru√ß√£o do Dashboard

st.set_page_config(layout="wide")
st.title("üìä Dashboard de An√°lise de Tend√™ncias do YouTube")

# Filtros na Barra Lateral
st.sidebar.header("Filtros")
# CORRE√á√ÉO: Usado o nome de coluna correto 'category' (min√∫sculo)
categorias_unicas = sorted(df['category'].unique())
categoria_selecionada = st.sidebar.multiselect( 
    "Filtre por categoria:", 
    options=categorias_unicas,
    default=categorias_unicas[:5]
)

# Aplica√ß√£o do filtro
if categoria_selecionada:
    df_filtrado = df[df['category'].isin(categoria_selecionada)]
else:
    df_filtrado = df.copy()

# Exibi√ß√£o das M√©tricas
st.header("M√©tricas Gerais (para a sele√ß√£o atual)")
# CORRE√á√ÉO: Sintaxe das colunas (v√≠rgula)
col1, col2, col3 = st.columns(3)
col1.metric("Total de V√≠deos", f"{len(df_filtrado):,}")
# CORRE√á√ÉO: Nomes de colunas em min√∫sculo ('views', 'likes')
col2.metric("Total de Visualiza√ß√µes", f"{int(df_filtrado['views'].sum()):,}")
col3.metric("Total de Likes", f"{int(df_filtrado['likes'].sum()):,}")

st.markdown("---")

# Visualiza√ß√µes do Dashboard 
st.header("An√°lises Visuais Interativas")

# Gr√°fico 1: Top 10 V√≠deos por visualiza√ß√µes (conforme solicitado)
st.subheader("üèÜ Top 10 V√≠deos por Visualiza√ß√µes")
# CORRE√á√ÉO: Agrupado por 'title' e usando a coluna 'views'
top_videos = df_filtrado.groupby('title')['views'].sum().nlargest(10)
fig1, ax1 = plt.subplots(figsize=(10, 6))
sns.barplot(x=top_videos.values, y=top_videos.index, ax=ax1, palette='viridis')
ax1.set_xlabel("Total de Visualiza√ß√µes")
ax1.set_ylabel("T√≠tulo do V√≠deo")
st.pyplot(fig1)

# GR√ÅFICO 2: Contagem de V√≠deos por Categori
st.subheader("üìä Contagem de V√≠deos por Categoria")
# CORRE√á√ÉO: Corrigido 'subplots' e 'countplot' e 'category'
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.countplot(y='category', data=df_filtrado, order=df_filtrado['category'].value_counts().index, ax=ax2, palette='plasma')
ax2.set_xlabel("N√∫mero de V√≠deos")
ax2.set_ylabel("Categoria")
st.pyplot(fig2)

#==========================================================
#SE√á√ÉO ADICIONAL COM MACHINE LEARNING ( ML )
#==========================================================

st.markdown("---")
st.header("ü§ñ Prevendo o Sucesso de um v√≠deo ( Machine Learning)")

#Verifica se h√° dados suficientes para treinar o modelo
if len(df_filtrado) > 10:
    st.write(""" Nesta se√ß√£o, iremos usar o modelo de **Regress√£o Linear** para prever quantos **Likes** um v√≠deo pode receber com base no n√∫mero de ** Visualiza√ß√µes**. O modelo √© treinado dinamicamente com os dados filtrados por voc√™ na barra lateral. """)
    # Prepara√ß√£o dos dados para o modelo
    X = df_filtrado[['views']] # Feature( Vari√°vel de entrada)
    Y = df_filtrado['likes'] # target ( o que queremos prever)

    # 2. Divis√£o dos dados em Treino e Teste
    #Usamos 70% para treinar e 30% para testar, como mais ou menos o exemplo em sala
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

    #3. Cria√ß√£o e modelo sendo treinado
    modelo_regressao = LinearRegression()
    modelo_regressao.fit( X_train, y_train)

    #4.  Verifica√ß√£o do modelo
    previsoes = modelo_regressao.predict(X_test)
    mse = mean_squared_error(y_test, previsoes)
    rmse = np.sqrt(mse)
    st.subheader("Avalia√ß√£o do Modelo de Regress√£o")
    col_aval1, col_aval2 = st.columns(2)
    col_aval1.metric("Erro Quadr√°tico M√©dio(RMSE)", f"{rmse:,.2f}")
    col_aval2.write("O RMSE indica, em m√©dia, qual a margem de erro da previs√£o do modelo(em n de likes). QUanto menor, melhor.")

    #5. Implementa√ß√£o: Interface para Previs√£o
    st.subheader("fa√ßa uma Previs√£o!")

    #Campo para o usu√°rio inserir o n√∫mero de visualiza√ß√µes
    input_views = st.number_input('Digite o n√∫mero de visualiza√ß√µes para prever os likes:', min_value=0,
         value=1000000,#Valor padr√£o)
         step=10000
    )
    if st.button("Prever Likes"):
        #Prepara o input do usu√°rio para o modelo
        #(Precisa ser um array 2D, por isso os colchetes duplos)
        input_data = np.array([[input_views]])

        #Previs√£o
        previsao_likes = modelo_regressao.predict(input_data)

        #Exibi o resultado
        st.success(f" Previs√£o: Um v√≠deo com **{input_views:,}** visualiza√ß√µes teria aproximadamente **{int(previsao_likes[0]):,}** likes.")
    else:
        st.warning("Selecione mais dados ou uma categoria com mais v√≠deos para ativar a funcionalidade  com base em Machine learning ( ML ).")